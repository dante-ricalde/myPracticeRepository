<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:int="http://www.springframework.org/schema/integration" xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc" xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:int-jmx="http://www.springframework.org/schema/integration/jmx" xmlns:int-file="http://www.springframework.org/schema/integration/file" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:int-script="http://www.springframework.org/schema/integration/scripting" xmlns:int-groovy="http://www.springframework.org/schema/integration/groovy"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/integration/groovy http://www.springframework.org/schema/integration/groovy/spring-integration-groovy-2.2.xsd
		http://www.springframework.org/schema/integration/jdbc http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc-2.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration/scripting http://www.springframework.org/schema/integration/scripting/spring-integration-scripting-2.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.2.xsd
		http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file-2.2.xsd
		http://www.springframework.org/schema/integration/jmx http://www.springframework.org/schema/integration/jmx/spring-integration-jmx-2.2.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream-2.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- In this case we are testing a simple groovy scripting included in a filter. The scripting support in spring integration provides the logic for various integration components similar 
		to the way the Spring Expression Language (SpEL) is used in Spring Integration. In this case the filter only let pass along the messages whose payload is 'good', hence the messages 
		whose payload is 'bad' are going to be dropped. -->
	<int:inbound-channel-adapter id="simpleScriptInboundChannelAdapter" channel="inlineScriptInput" expression="T(java.lang.Math).random() > 0.5 ? 'good' : 'bad'"
		auto-startup="false">
		<int:poller fixed-rate="1000" />
	</int:inbound-channel-adapter>

	<int:channel id="inlineScriptInput" />

	<int:filter id="simpleScriptFilter" input-channel="inlineScriptInput" output-channel="simpleScriptOutputChannel" auto-startup="false">
		<int-script:script lang="groovy"><![CDATA[
		return payload == 'good'
		]]></int-script:script>
	</int:filter>

	<int:channel id="simpleScriptOutputChannel" />

	<int:outbound-channel-adapter id="simpleScriptOutboundChannelAdapter" channel="simpleScriptOutputChannel" ref="channelAdapterReceiver" method="receiveMessage"
		auto-startup="false" />

	<!-- In this case we are testing a script with variable bindings. In this case I am using an external javascript script, we have provided the script to reference variables externally 
		provided to the script's execution context (payload and headers are used as binding variables by default). The script is receiving the variables and is returning true if the variable 
		bar is 'bar', otherwise returns false, the script is printing the date that is a variable received from the variable bindings, in this case the date variable binding references a spring 
		bean reference, in this case a bean of type Date. We have tested that the custom variable bindings (or the script-variable-generator) cannot be used with an inline script. -->
	<int:inbound-channel-adapter id="scriptWithVariableBindingsInboundChannelAdapter" channel="scriptWithVariableBindingsInputDirectChannel" expression="T(java.lang.Math).random() > 0.5 ? 'good' : 'bad'"
		auto-startup="false">
		<int:poller fixed-rate="1000" />
	</int:inbound-channel-adapter>

	<int:channel id="scriptWithVariableBindingsInputDirectChannel">
		<int:interceptors>
			<int:ref bean="myChannelInterceptor" />
		</int:interceptors>
	</int:channel>

	<int:filter id="scriptWithVariableBindingsFilter" input-channel="scriptWithVariableBindingsInputDirectChannel" output-channel="scriptWithVariableBindingsOutputDirectChannel"
		auto-startup="false">
		<int-script:script lang="js" location="scripts/js/MyScript.js">
			<int-script:variable name="foo" value="foo" />
			<int-script:variable name="bar" value="bar" />
			<int-script:variable name="date" ref="scriptWithVariablesDate" />
		</int-script:script>
	</int:filter>

	<bean id="scriptWithVariablesDate" class="java.util.Date" />

	<int:channel id="scriptWithVariableBindingsOutputDirectChannel" />

	<int:outbound-channel-adapter id="scriptWithVariableBindingsOutboundChannelAdapter" channel="scriptWithVariableBindingsOutputDirectChannel" ref="channelAdapterReceiver"
		method="receiveMessage" auto-startup="false" />

</beans>