<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:int="http://www.springframework.org/schema/integration" xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc" xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:int-jmx="http://www.springframework.org/schema/integration/jmx" xmlns:int-file="http://www.springframework.org/schema/integration/file" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:int-script="http://www.springframework.org/schema/integration/scripting" xmlns:int-groovy="http://www.springframework.org/schema/integration/groovy" xmlns:int-http="http://www.springframework.org/schema/integration/http"
	xmlns:int-ftp="http://www.springframework.org/schema/integration/ftp" xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-event="http://www.springframework.org/schema/integration/event" xmlns:int-feed="http://www.springframework.org/schema/integration/feed" xmlns:gfe="http://www.springframework.org/schema/gemfire"
	xmlns:int-gfe="http://www.springframework.org/schema/integration/gemfire" xmlns:gfe-data="http://www.springframework.org/schema/data/gemfire" xmlns:int-ip="http://www.springframework.org/schema/integration/ip"
	xmlns:int-jpa="http://www.springframework.org/schema/integration/jpa" xmlns:int-jms="http://www.springframework.org/schema/integration/jms" xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/integration/jdbc http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc-2.2.xsd
		http://www.springframework.org/schema/data/gemfire http://www.springframework.org/schema/data/gemfire/spring-data-gemfire.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/integration/ftp http://www.springframework.org/schema/integration/ftp/spring-integration-ftp-2.2.xsd
		http://www.springframework.org/schema/integration/ip http://www.springframework.org/schema/integration/ip/spring-integration-ip-2.2.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-4.0.xsd
		http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms-4.0.xsd
		http://www.springframework.org/schema/integration/jmx http://www.springframework.org/schema/integration/jmx/spring-integration-jmx-2.2.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream-2.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
		http://www.springframework.org/schema/integration/groovy http://www.springframework.org/schema/integration/groovy/spring-integration-groovy-2.2.xsd
		http://www.springframework.org/schema/integration/event http://www.springframework.org/schema/integration/event/spring-integration-event-2.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration/scripting http://www.springframework.org/schema/integration/scripting/spring-integration-scripting-2.1.xsd
		http://www.springframework.org/schema/integration/http http://www.springframework.org/schema/integration/http/spring-integration-http-2.2.xsd
		http://www.springframework.org/schema/integration/gemfire http://www.springframework.org/schema/integration/gemfire/spring-integration-gemfire-2.2.xsd
		http://www.springframework.org/schema/integration/feed http://www.springframework.org/schema/integration/feed/spring-integration-feed-2.2.xsd
		http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file-2.2.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/integration/jpa http://www.springframework.org/schema/integration/jpa/spring-integration-jpa-3.0.xsd">

	<!-- In this case I am testing a simple jms-inbound-gateway. This gateway provides request/reply behavior instead of unidirectional send or received. By default Producer will not be 
		notified of the errors that might have occurred on the consumer side and will time out waiting for the reply. In this case we want to communicate an error condition back to the consumer, 
		in other words treat the Exception as a valid reply by mapping it to a Message. To accomplish this we have configured the error-channel attribute to which errors are sent for processing, 
		potentially resulting in a reply Message payload that conforms to some contract defining what a caller may expect as an 'error' reply and that reply message is sent to the queue 'replyQueue' 
		like the normal reply messages generated by the <int:service-activator.
		
		Regarding threats we have:
		
		To sent the messages:
		<int:inbound-channel-adapter -> simpleJmsOutboundChannelAdapterChannel -> <int-jms:outbound-channel-adapter -> queue 'mmm'
		
		The normal case:
		<int-jms:inbound-gateway -> simpleJmsInboundGatewayRequestChannel -> <int:service-activator -> <int-jms:inbound-gateway -> queue 'mmmReply'
		
		The case with exception in the process of the received messages (received by the jms-inbound-gateway) in service-activator:
		<int-jms:inbound-gateway -> simpleJmsInboundGatewayRequestChannel -> <int:service-activator -> <int-jms:inbound-gateway -> simpleJmsInboundGatewayErrorChannel ->
		<int:transformer -> <int-jms:inbound-gateway -> queue 'mmmReply'
		
		 -->

	<int:inbound-channel-adapter id="simpleJmsOutboundChannelAdapterInboundChannelAdapter"
		expression="T(java.lang.Math).random() > 0.5 ? T(org.springframework.integration.support.MessageBuilder).withPayload(new spring.integration.test.var.Item(T(java.util.UUID).randomUUID().toString(), 
 		'Dantito Ricalde Rivera', 'Dantito Ricalde Rivera', 1)).setHeader('className', 'spring.integration.test.var.Item').build():
		T(org.springframework.integration.support.MessageBuilder).withPayload(new spring.integration.test.var.Item(T(java.util.UUID).randomUUID().toString(), 'Danielito Ricalde Rivera',
		'Danielito Ricalde Rivera', 2)).setHeader('className', 'spring.integration.test.var.Item').build()"
		channel="simpleJmsOutboundChannelAdapterChannel" auto-startup="true">
		<int:poller fixed-rate="5000" />
	</int:inbound-channel-adapter>

	<int:channel id="simpleJmsOutboundChannelAdapterChannel">
		<int:interceptors>
			<ref bean="myChannelInterceptor" />
		</int:interceptors>
	</int:channel>

	<int-jms:outbound-channel-adapter id="simpleJmsOutboundChannelAdapter" destination-name="mmm" channel="simpleJmsOutboundChannelAdapterChannel"
		message-converter="mappingJackson2MessageConverter" auto-startup="true" />

	<bean id="mappingJackson2MessageConverter" class="org.springframework.jms.support.converter.MappingJackson2MessageConverter">
		<property name="typeIdPropertyName" value="className" />
	</bean>

	<bean id="customObjectMapper" class="spring.integration.test.mapper.factory.ObjectMapperFactory" factory-method="getMapper" />

	<int-jms:inbound-gateway id="simpleJmsInboundGateway" request-destination="queue" default-reply-destination="replyQueue" request-channel="simpleJmsInboundGatewayRequestChannel"
		error-channel="simpleJmsInboundGatewayErrorChannel" message-converter="mappingJackson2MessageConverter" auto-startup="true" />

	<int:channel id="simpleJmsInboundGatewayRequestChannel">
		<int:interceptors>
			<ref bean="myChannelInterceptor" />
		</int:interceptors>
	</int:channel>

	<int:service-activator id="simpleJmsInboundGatewayRequestChannelServiceAdapter" input-channel="simpleJmsInboundGatewayRequestChannel"
		expression="T(java.lang.Math).random() > 0.5 ? T(java.lang.String).valueOf('Received message for Service Activator. Message: ' + #this) : T(java.lang.Integer).valueOf('Dantito')"
		auto-startup="true" />

	<int:channel id="simpleJmsInboundGatewayErrorChannel">
		<int:interceptors>
			<ref bean="myChannelInterceptor" />
		</int:interceptors>
	</int:channel>

	<int:transformer id="simpleJmsInboundGatewayErrorChannelTransformer" input-channel="simpleJmsInboundGatewayErrorChannel"
		expression="T(org.springframework.messaging.support.MessageBuilder).withPayload(new spring.integration.test.var.Error(payload.class, payload.message)).build()" auto-startup="true" />

	<!-- ****************************************** JMS Configuration ************************************** -->

	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
	</bean>

	<bean id="queue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="mmm" />
	</bean>

	<bean id="replyQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="mmmReply" />
	</bean>

	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="defaultDestination" ref="queue" />
		<property name="receiveTimeout" value="#{T(org.springframework.jms.core.JmsTemplate).RECEIVE_TIMEOUT_NO_WAIT}" />
	</bean>

</beans>