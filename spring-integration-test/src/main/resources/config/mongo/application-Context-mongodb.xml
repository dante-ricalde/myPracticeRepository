<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:int="http://www.springframework.org/schema/integration" xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc" xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:int-jmx="http://www.springframework.org/schema/integration/jmx" xmlns:int-file="http://www.springframework.org/schema/integration/file" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:int-script="http://www.springframework.org/schema/integration/scripting" xmlns:int-groovy="http://www.springframework.org/schema/integration/groovy" xmlns:int-http="http://www.springframework.org/schema/integration/http"
	xmlns:int-ftp="http://www.springframework.org/schema/integration/ftp" xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-event="http://www.springframework.org/schema/integration/event" xmlns:int-feed="http://www.springframework.org/schema/integration/feed" xmlns:gfe="http://www.springframework.org/schema/gemfire"
	xmlns:int-gfe="http://www.springframework.org/schema/integration/gemfire" xmlns:gfe-data="http://www.springframework.org/schema/data/gemfire" xmlns:int-ip="http://www.springframework.org/schema/integration/ip"
	xmlns:int-jpa="http://www.springframework.org/schema/integration/jpa" xmlns:int-jms="http://www.springframework.org/schema/integration/jms" xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:int-mail="http://www.springframework.org/schema/integration/mail" xmlns:int-mqtt="http://www.springframework.org/schema/integration/mqtt"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/integration/jdbc http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc-2.2.xsd
		http://www.springframework.org/schema/data/gemfire http://www.springframework.org/schema/data/gemfire/spring-data-gemfire.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/integration/ftp http://www.springframework.org/schema/integration/ftp/spring-integration-ftp-2.2.xsd
		http://www.springframework.org/schema/integration/ip http://www.springframework.org/schema/integration/ip/spring-integration-ip-2.2.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-4.3.xsd
		http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms-4.0.xsd
		http://www.springframework.org/schema/integration/jmx http://www.springframework.org/schema/integration/jmx/spring-integration-jmx-2.2.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream-2.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
		http://www.springframework.org/schema/integration/groovy http://www.springframework.org/schema/integration/groovy/spring-integration-groovy-2.2.xsd
		http://www.springframework.org/schema/integration/event http://www.springframework.org/schema/integration/event/spring-integration-event-2.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration/scripting http://www.springframework.org/schema/integration/scripting/spring-integration-scripting-2.1.xsd
		http://www.springframework.org/schema/integration/http http://www.springframework.org/schema/integration/http/spring-integration-http-2.2.xsd
		http://www.springframework.org/schema/integration/gemfire http://www.springframework.org/schema/integration/gemfire/spring-integration-gemfire-2.2.xsd
		http://www.springframework.org/schema/integration/feed http://www.springframework.org/schema/integration/feed/spring-integration-feed-2.2.xsd
		http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file-2.2.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/integration/jpa http://www.springframework.org/schema/integration/jpa/spring-integration-jpa-3.0.xsd
		http://www.springframework.org/schema/integration/mail http://www.springframework.org/schema/integration/mail/spring-integration-mail-4.0.xsd
		http://www.springframework.org/schema/integration/mqtt http://www.springframework.org/schema/integration/mqtt/spring-integration-mqtt-4.1.xsd">
		
<!-- 		<bean id="mongoDbFactory" class="org.springframework.data.mongodb.core.SimpleMongoDbFactory" c:mongo-ref="myMongo" c:databaseName="test"> -->
		<bean id="mongoDbFactory" class="org.springframework.data.mongodb.core.SimpleMongoDbFactory">
			<constructor-arg>
				<bean class="com.mongodb.Mongo" />
			</constructor-arg>
			<constructor-arg value="test" />
		</bean>
		
		<bean id="mongoDbMessageStore" class="org.springframework.integration.mongodb.store.MongoDbMessageStore" c:mongoDbFactory-ref="mongoDbFactory" />
		
	<!--  In this case I am testing a simple mongoDbMessageStore used by a QueueChannel. The MongoDbMessageStore expands the Message as a Mongo document with all nested properties using the 
	Spring Data Mongo Mapping mechanism. This is useful when you need to have access to the payload or headers for auditing or analytics, for example, against stored messages. 
	The MongoDbMessageStore uses a custom MappingMongoConverter implementation to store Messages as MongoDB documents and there are some limitations for the properties (payload or headers 
	values) of the Message. For example, there is no ability to configure custom converters for complex domain payloads or header values, or to provide a custom MongoTemplate (or 
	MappingMongoConverter). To achieve these capabilities, an alternative MongoDB MessageStore implementation has been introduced (the ConfigurableMongoDbMessageStore).
	
		In this case each generated message by the "mongoDbMessageStoreInboundChannelAdapter" inbound channel adapter that is sent to the queue channel "somePersistentQueueChannel" is
		stored in the collection "messages" of the data base "test". These are some messages stored in the collection messages retrieved using "db.messages.find().pretty()": 
		
		{
	        "_id" : ObjectId("592aa501b7565609210edba8"),
	        "_createdDate" : NumberLong("1495966977672"),
	        "_class" : "org.springframework.integration.mongodb.store.MongoDbMessageStore$MessageWrapper",
	        "_groupId" : "mongoDbMessageStore:somePersistentQueueChannel",
	        "_messageType" : "org.springframework.messaging.support.GenericMessage",
	        "payload" : {
	                "_class" : "spring.integration.test.var.Item",
	                "_id" : "273aa71c-e5a3-4edc-8d9d-8433dc9dab1c",
	                "code" : "Danielito Ricalde Rivera",
	                "description" : "Danielito Ricalde Rivera",
	                "status" : 2
	        },
	        "headers" : {
	                "mqtt_retained" : false,
	                "history" : {
	                        "_class" : "org.springframework.integration.history.MessageHistory",
	                        "components" : [
	                                {
	                                        "name" : "mongoDbMessageStoreInboundChannelAdapter",
	                                        "type" : "inbound-channel-adapter",
	                                        "timestamp" : "1495966977610"
	                                },
	                                {
	                                        "name" : "somePersistentQueueChannel",
	                                        "type" : "channel",
	                                        "timestamp" : "1495966977611"
	                                }
	                        ]
	                },
	                "id" : {
	                        "_value" : "2b2d2bf5-abd1-35cf-8dda-e652f40772f5",
	                        "_class" : "java.util.UUID"
	                },
	                "timestamp" : NumberLong("1495966977611")
	        },
	        "_group_timestamp" : NumberLong("1495966977661"),
	        "_group_update_timestamp" : NumberLong("1495966977661"),
	        "_last_released_sequence" : 0,
	        "_group_complete" : false,
	        "sequence" : 1
	}
	{
	        "_id" : ObjectId("592aa502b7565609210edba9"),
	        "_createdDate" : NumberLong("1495966978604"),
	        "_class" : "org.springframework.integration.mongodb.store.MongoDbMessageStore$MessageWrapper",
	        "_groupId" : "mongoDbMessageStore:somePersistentQueueChannel",
	        "_messageType" : "org.springframework.messaging.support.GenericMessage",
	        "payload" : {
	                "_class" : "spring.integration.test.var.Item",
	                "_id" : "3ddf8076-c5a6-4325-9f68-338419aff031",
	                "code" : "Dantito Ricalde Rivera",
	                "description" : "Dantito Ricalde Rivera",
	                "status" : 1
	        },
	        "headers" : {
	                "mqtt_retained" : false,
	                "history" : {
	                        "_class" : "org.springframework.integration.history.MessageHistory",
	                        "components" : [
	                                {
	                                        "name" : "mongoDbMessageStoreInboundChannelAdapter",
	                                        "type" : "inbound-channel-adapter",
	                                        "timestamp" : "1495966978600"
	                                },
	                                {
	                                        "name" : "somePersistentQueueChannel",
	                                        "type" : "channel",
	                                        "timestamp" : "1495966978600"
	                                }
	                        ]
	                },
	                "id" : {
	                        "_value" : "593e8db7-c8de-6e0c-479b-75540bf07c08",
	                        "_class" : "java.util.UUID"
	                },
	                "timestamp" : NumberLong("1495966978600")
	        },
	        "_group_timestamp" : NumberLong("1495966977661"),
	        "_group_update_timestamp" : NumberLong("1495966978603"),
	        "_last_released_sequence" : 0,
	        "_group_complete" : false,
	        "sequence" : 2
	}
	{
	        "_id" : ObjectId("592aa503b7565609210edbaa"),
	        "_createdDate" : NumberLong("1495966979606"),
	        "_class" : "org.springframework.integration.mongodb.store.MongoDbMessageStore$MessageWrapper",
	        "_groupId" : "mongoDbMessageStore:somePersistentQueueChannel",
	        "_messageType" : "org.springframework.messaging.support.GenericMessage",
	        "payload" : {
	                "_class" : "spring.integration.test.var.Item",
	                "_id" : "a9f6437d-a165-44fc-998b-d45e082c5612",
	                "code" : "Dantito Ricalde Rivera",
	                "description" : "Dantito Ricalde Rivera",
	                "status" : 1
	        },
	        "headers" : {
	                "mqtt_retained" : false,
	                "history" : {
	                        "_class" : "org.springframework.integration.history.MessageHistory",
	                        "components" : [
	                                {
	                                        "name" : "mongoDbMessageStoreInboundChannelAdapter",
	                                        "type" : "inbound-channel-adapter",
	                                        "timestamp" : "1495966979600"
	                                },
	                                {
	                                        "name" : "somePersistentQueueChannel",
	                                        "type" : "channel",
	                                        "timestamp" : "1495966979601"
	                                }
	                        ]
	                },
	                "id" : {
	                        "_value" : "eed1a97f-01b6-2164-6d8d-d6325052a4bb",
	                        "_class" : "java.util.UUID"
	                },
	                "timestamp" : NumberLong("1495966979601")
	        },
	        "_group_timestamp" : NumberLong("1495966977661"),
	        "_group_update_timestamp" : NumberLong("1495966979605"),
	        "_last_released_sequence" : 0,
	        "_group_complete" : false,
	        "sequence" : 3
	}
		
		 -->
		
		<int:inbound-channel-adapter id="mongoDbMessageStoreInboundChannelAdapter"
			expression="T(java.lang.Math).random() > 0.5 ? T(org.springframework.integration.support.MessageBuilder).withPayload(new spring.integration.test.var.Item(T(java.util.UUID).randomUUID().toString(), 
	 		'Dantito Ricalde Rivera', 'Dantito Ricalde Rivera', 1)).setHeader('mqtt_retained', false).build():
			T(org.springframework.integration.support.MessageBuilder).withPayload(new spring.integration.test.var.Item(T(java.util.UUID).randomUUID().toString(), 'Danielito Ricalde Rivera',
			'Danielito Ricalde Rivera', 2)).setHeader('mqtt_retained', false).build()"
			channel="somePersistentQueueChannel" auto-startup="false">
			<int:poller fixed-rate="1000" />
		</int:inbound-channel-adapter>
		
		<int:channel id="somePersistentQueueChannel">
			<int:queue message-store="mongoDbMessageStore" />
		</int:channel>
		
		<!--  In this case I am testing a configurableMongoDbMessageStore usage by an aggregator. The example is very simple: the splitters splits the array list recived by
		the inbound channel adapter, all the parts of the array list are sent to the aggregator (part by part) and when all the parts that own to a group are completed (recei-
		ved by the aggregator) are joined in an Array List and sent to the outbound channel adapter receiver.
		
		I have tested the aggregator using the mongoDbMessageStore and it works 
		perfectly (the messages are store in the messages collection). Regarding the testing of the aggregator using the configurableMongoDbMessageStore it works perfectly
		and the messages are being stored in the collection "configurableStoreMessages" while the messages are being processed by the aggregator, when all the parts of a
		message group are processed by the aggregator then are deleted from the collection "configurableStoreMessages".
		
			I have seen the collection using "db.configurableStoreMessages.find().pretty()" and all the messages that conforms a message group are stored as bytes, but all
			the messages parts have a unique "groupId" for each message group. 
		
		Theory says that the ConfigurableMongoDbMessageStore uses standard Java serialization 
		to write/read Message s to/from MongoDB (see MongoDbMessageBytesConverter) and relies on default values for other properties from MongoTemplate, which is built from the 
		provided MongoDbFactory and MappingMongoConverter.
		
		
			{ "_id" : "messagesSequence", "sequence" : 640 }
			{
			        "_id" : ObjectId("5940d5eb6dfe39da2e5e2eb3"),
			        "_class" : "org.springframework.integration.mongodb.store.MessageDocument",
			        "message" : BinData(0,"rO0ABXNyADRvcmcuc3ByaW5nZnJhbWV3b3JrLm1lc3NhZ2luZy5zdXBwb3J0LkdlbmVyaWNNZXNzYWdlOz3T8KadRpoCAAJMAAdoZWFkZXJzdAAuTG9yZy9zcHJpbmdmcmFtZXdvcmsvbWVzc2FnaW5nL01lc3NhZ2VIZWFkZXJzO0wAB3BheWxvYWR0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyACxvcmcuc3ByaW5nZnJhbWV3b3JrLm1lc3NhZ2luZy5NZXNzYWdlSGVhZGVyc2GhlffBY13YAwABTAAHaGVhZGVyc3QAD0xqYXZhL3V0aWwvTWFwO3hwc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAABncIAAAACAAAAAZ0AA5zZXF1ZW5jZU51bWJlcnNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABdAANY29ycmVsYXRpb25JZHNyAA5qYXZhLnV0aWwuVVVJRLyZA/eYbYUvAgACSgAMbGVhc3RTaWdCaXRzSgALbW9zdFNpZ0JpdHN4cGC6xpqoVh8fSukPF/tWK6x0AAdoaXN0b3J5c3IANm9yZy5zcHJpbmdmcmFtZXdvcmsuaW50ZWdyYXRpb24uaGlzdG9yeS5NZXNzYWdlSGlzdG9yeRPNAt/Mt8SCAgABTAAKY29tcG9uZW50c3QAEExqYXZhL3V0aWwvTGlzdDt4cHNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAAAFdwQAAAAFc3IAPG9yZy5zcHJpbmdmcmFtZXdvcmsuaW50ZWdyYXRpb24uaGlzdG9yeS5NZXNzYWdlSGlzdG9yeSRFbnRyeY3X9zPyd6bJAgAAeHIAFGphdmEudXRpbC5Qcm9wZXJ0aWVzORLQenA2PpgCAAFMAAhkZWZhdWx0c3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cgATamF2YS51dGlsLkhhc2h0YWJsZRO7DyUhSuS4AwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAh3CAAAAAsAAAADdAAEbmFtZXQAQnRvVGVzdEFNb25nb0RiTWVzc2FnZVN0b3JlVXNhZ2VCeUFuQWdncmVnYXRvckluYm91bmRDaGFubmVsQWRhcHRlcnQABHR5cGV0ABdpbmJvdW5kLWNoYW5uZWwtYWRhcHRlcnQACXRpbWVzdGFtcHQADTE0OTc0MjEyOTE1NDZ4cHNxAH4AFj9AAAAAAAAIdwgAAAALAAAAA3EAfgAbdABBdG9UZXN0QU1vbmdvRGJNZXNzYWdlU3RvcmVVc2FnZUJ5QW5BZ2dyZWdhdG9yU3BsaXR0ZXJJbnB1dENoYW5uZWxxAH4AHXQAB2NoYW5uZWxxAH4AH3QADTE0OTc0MjEyOTE1NDZ4cHNxAH4AFj9AAAAAAAAIdwgAAAALAAAAA3EAfgAbdAA1dG9UZXN0QU1vbmdvRGJNZXNzYWdlU3RvcmVVc2FnZUJ5QW5BZ2dyZWdhdG9yU3BsaXR0ZXJxAH4AHXQACHNwbGl0dGVycQB+AB90AA0xNDk3NDIxMjkxNTQ3eHBzcQB+ABY/QAAAAAAACHcIAAAACwAAAANxAH4AG3QAQnRvVGVzdEFNb25nb0RiTWVzc2FnZVN0b3JlVXNhZ2VCeUFuQWdncmVnYXRvclNwbGl0dGVyT3V0cHV0Q2hhbm5lbHEAfgAdcQB+ACNxAH4AH3QADTE0OTc0MjEyOTE1NDd4cHNxAH4AFj9AAAAAAAAIdwgAAAALAAAAA3EAfgAbdAAtdG9UZXN0QU1vbmdvRGJNZXNzYWdlU3RvcmVVc2FnZUJ5QW5BZ2dyZWdhdG9ycQB+AB10AAphZ2dyZWdhdG9ycQB+AB90AA0xNDk3NDIxMjkxNTQ3eHB4dAACaWRzcQB+AA65Hl5pijjZ+5O9EWKTmdd1dAAMc2VxdWVuY2VTaXplc3EAfgAKAAAABXEAfgAfc3IADmphdmEubGFuZy5Mb25nO4vkkMyPI98CAAFKAAV2YWx1ZXhxAH4ACwAAAVylQ6AbeHh0ABBtZXNzYWdlIG51bWJlciAx"),
			        "messageId" : BinData(3,"ddeZk2IRvZP72TiKaV4euQ=="),
			        "createdTime" : NumberLong("1497421291551"),
			        "groupId" : BinData(3,"rCtW+xcP6UofH1aomsa6YA=="),
			        "lastModifiedTime" : NumberLong("1497421291551"),
			        "complete" : false,
			        "lastReleasedSequence" : 0,
			        "sequence" : 316
			}
			{
			        "_id" : ObjectId("5940d5eb6dfe39da2e5e2eb4"),
			        "_class" : "org.springframework.integration.mongodb.store.MessageDocument",
			        "message" : BinData(0,"rO0ABXNyADRvcmcuc3ByaW5nZnJhbWV3b3JrLm1lc3NhZ2luZy5zdXBwb3J0LkdlbmVyaWNNZXNzYWdlOz3T8KadRpoCAAJMAAdoZWFkZXJzdAAuTG9yZy9zcHJpbmdmcmFtZXdvcmsvbWVzc2FnaW5nL01lc3NhZ2VIZWFkZXJzO0wAB3BheWxvYWR0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyACxvcmcuc3ByaW5nZnJhbWV3b3JrLm1lc3NhZ2luZy5NZXNzYWdlSGVhZGVyc2GhlffBY13YAwABTAAHaGVhZGVyc3QAD0xqYXZhL3V0aWwvTWFwO3hwc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAABncIAAAACAAAAAZ0AA5zZXF1ZW5jZU51bWJlcnNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAACdAANY29ycmVsYXRpb25JZHNyAA5qYXZhLnV0aWwuVVVJRLyZA/eYbYUvAgACSgAMbGVhc3RTaWdCaXRzSgALbW9zdFNpZ0JpdHN4cGC6xpqoVh8fSukPF/tWK6x0AAdoaXN0b3J5c3IANm9yZy5zcHJpbmdmcmFtZXdvcmsuaW50ZWdyYXRpb24uaGlzdG9yeS5NZXNzYWdlSGlzdG9yeRPNAt/Mt8SCAgABTAAKY29tcG9uZW50c3QAEExqYXZhL3V0aWwvTGlzdDt4cHNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAAAFdwQAAAAFc3IAPG9yZy5zcHJpbmdmcmFtZXdvcmsuaW50ZWdyYXRpb24uaGlzdG9yeS5NZXNzYWdlSGlzdG9yeSRFbnRyeY3X9zPyd6bJAgAAeHIAFGphdmEudXRpbC5Qcm9wZXJ0aWVzORLQenA2PpgCAAFMAAhkZWZhdWx0c3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cgATamF2YS51dGlsLkhhc2h0YWJsZRO7DyUhSuS4AwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAh3CAAAAAsAAAADdAAEbmFtZXQAQnRvVGVzdEFNb25nb0RiTWVzc2FnZVN0b3JlVXNhZ2VCeUFuQWdncmVnYXRvckluYm91bmRDaGFubmVsQWRhcHRlcnQABHR5cGV0ABdpbmJvdW5kLWNoYW5uZWwtYWRhcHRlcnQACXRpbWVzdGFtcHQADTE0OTc0MjEyOTE1NDZ4cHNxAH4AFj9AAAAAAAAIdwgAAAALAAAAA3EAfgAbdABBdG9UZXN0QU1vbmdvRGJNZXNzYWdlU3RvcmVVc2FnZUJ5QW5BZ2dyZWdhdG9yU3BsaXR0ZXJJbnB1dENoYW5uZWxxAH4AHXQAB2NoYW5uZWxxAH4AH3QADTE0OTc0MjEyOTE1NDZ4cHNxAH4AFj9AAAAAAAAIdwgAAAALAAAAA3EAfgAbdAA1dG9UZXN0QU1vbmdvRGJNZXNzYWdlU3RvcmVVc2FnZUJ5QW5BZ2dyZWdhdG9yU3BsaXR0ZXJxAH4AHXQACHNwbGl0dGVycQB+AB90AA0xNDk3NDIxMjkxNTQ3eHBzcQB+ABY/QAAAAAAACHcIAAAACwAAAANxAH4AG3QAQnRvVGVzdEFNb25nb0RiTWVzc2FnZVN0b3JlVXNhZ2VCeUFuQWdncmVnYXRvclNwbGl0dGVyT3V0cHV0Q2hhbm5lbHEAfgAdcQB+ACNxAH4AH3QADTE0OTc0MjEyOTE1NjJ4cHNxAH4AFj9AAAAAAAAIdwgAAAALAAAAA3EAfgAbdAAtdG9UZXN0QU1vbmdvRGJNZXNzYWdlU3RvcmVVc2FnZUJ5QW5BZ2dyZWdhdG9ycQB+AB10AAphZ2dyZWdhdG9ycQB+AB90AA0xNDk3NDIxMjkxNTYyeHB4dAACaWRzcQB+AA7xQyHZmukWqQ5D9izoIDTgdAAMc2VxdWVuY2VTaXplc3EAfgAKAAAABXEAfgAfc3IADmphdmEubGFuZy5Mb25nO4vkkMyPI98CAAFKAAV2YWx1ZXhxAH4ACwAAAVylQ6AqeHh0ABBtZXNzYWdlIG51bWJlciAy"),
			        "messageId" : BinData(3,"4DQg6Cz2Qw6pFuma2SFD8Q=="),
			        "createdTime" : NumberLong("1497421291551"),
			        "groupId" : BinData(3,"rCtW+xcP6UofH1aomsa6YA=="),
			        "lastModifiedTime" : NumberLong("1497421291570"),
			        "complete" : false,
			        "lastReleasedSequence" : 0,
			        "sequence" : 317
			}
			
			...
			
			{
			        "_id" : ObjectId("5940d65d6dfe7f71ead8c27c"),
			        "_class" : "org.springframework.integration.mongodb.store.MessageDocument",
			        "message" : BinData(0,"rO0ABXNyADRvcmcuc3ByaW5nZnJhbWV3b3JrLm1lc3NhZ2luZy5zdXBwb3J0LkdlbmVyaWNNZXNzYWdlOz3T8KadRpoCAAJMAAdoZWFkZXJzdAAuTG9yZy9zcHJpbmdmcmFtZXdvcmsvbWVzc2FnaW5nL01lc3NhZ2VIZWFkZXJzO0wAB3BheWxvYWR0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyACxvcmcuc3ByaW5nZnJhbWV3b3JrLm1lc3NhZ2luZy5NZXNzYWdlSGVhZGVyc2GhlffBY13YAwABTAAHaGVhZGVyc3QAD0xqYXZhL3V0aWwvTWFwO3hwc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAABncIAAAACAAAAAZ0AA5zZXF1ZW5jZU51bWJlcnNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAFdAANY29ycmVsYXRpb25JZHNyAA5qYXZhLnV0aWwuVVVJRLyZA/eYbYUvAgACSgAMbGVhc3RTaWdCaXRzSgALbW9zdFNpZ0JpdHN4cKjSF/Jc5mfUklo65OBNNkx0AAdoaXN0b3J5c3IANm9yZy5zcHJpbmdmcmFtZXdvcmsuaW50ZWdyYXRpb24uaGlzdG9yeS5NZXNzYWdlSGlzdG9yeRPNAt/Mt8SCAgABTAAKY29tcG9uZW50c3QAEExqYXZhL3V0aWwvTGlzdDt4cHNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAAAFdwQAAAAFc3IAPG9yZy5zcHJpbmdmcmFtZXdvcmsuaW50ZWdyYXRpb24uaGlzdG9yeS5NZXNzYWdlSGlzdG9yeSRFbnRyeY3X9zPyd6bJAgAAeHIAFGphdmEudXRpbC5Qcm9wZXJ0aWVzORLQenA2PpgCAAFMAAhkZWZhdWx0c3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cgATamF2YS51dGlsLkhhc2h0YWJsZRO7DyUhSuS4AwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAh3CAAAAAsAAAADdAAEbmFtZXQAQnRvVGVzdEFNb25nb0RiTWVzc2FnZVN0b3JlVXNhZ2VCeUFuQWdncmVnYXRvckluYm91bmRDaGFubmVsQWRhcHRlcnQABHR5cGV0ABdpbmJvdW5kLWNoYW5uZWwtYWRhcHRlcnQACXRpbWVzdGFtcHQADTE0OTc0MjE0MDU0NjV4cHNxAH4AFj9AAAAAAAAIdwgAAAALAAAAA3EAfgAbdABBdG9UZXN0QU1vbmdvRGJNZXNzYWdlU3RvcmVVc2FnZUJ5QW5BZ2dyZWdhdG9yU3BsaXR0ZXJJbnB1dENoYW5uZWxxAH4AHXQAB2NoYW5uZWxxAH4AH3QADTE0OTc0MjE0MDU0NjV4cHNxAH4AFj9AAAAAAAAIdwgAAAALAAAAA3EAfgAbdAA1dG9UZXN0QU1vbmdvRGJNZXNzYWdlU3RvcmVVc2FnZUJ5QW5BZ2dyZWdhdG9yU3BsaXR0ZXJxAH4AHXQACHNwbGl0dGVycQB+AB90AA0xNDk3NDIxNDA1NDY1eHBzcQB+ABY/QAAAAAAACHcIAAAACwAAAANxAH4AG3QAQnRvVGVzdEFNb25nb0RiTWVzc2FnZVN0b3JlVXNhZ2VCeUFuQWdncmVnYXRvclNwbGl0dGVyT3V0cHV0Q2hhbm5lbHEAfgAdcQB+ACNxAH4AH3QADTE0OTc0MjE0MDU0ODh4cHNxAH4AFj9AAAAAAAAIdwgAAAALAAAAA3EAfgAbdAAtdG9UZXN0QU1vbmdvRGJNZXNzYWdlU3RvcmVVc2FnZUJ5QW5BZ2dyZWdhdG9ycQB+AB10AAphZ2dyZWdhdG9ycQB+AB90AA0xNDk3NDIxNDA1NDg4eHB4dAACaWRzcQB+AA7eyszfJSnhb2a44GXYntUsdAAMc2VxdWVuY2VTaXplcQB+AAxxAH4AH3NyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cQB+AAsAAAFcpUVdMHh4dAAQbWVzc2FnZSBudW1iZXIgNQ=="),
			        "messageId" : BinData(3,"LNWe2GXguGZv4Skl38zK3g=="),
			        "createdTime" : NumberLong("1497421405467"),
			        "groupId" : BinData(3,"TDZN4OQ6WpLUZ+Zc8hfSqA=="),
			        "lastModifiedTime" : NumberLong("1497421405494"),
			        "complete" : true,
			        "lastReleasedSequence" : 0,
			        "sequence" : 640
			}
			
			A snippet of the logs for a completed processing of this example:
			
			 DEBUG [org.springframework.integration.endpoint.SourcePollingChannelAdapter]  - Poll resulted in Message: GenericMessage [payload=[message number 1, message number 2, message number 3, message number 4, message number 5], headers={id=12e64c78-b804-c5f7-c008-480116fae854, timestamp=1497421404466}]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - preSend on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel', message: GenericMessage [payload=[message number 1, message number 2, message number 3, message number 4, message number 5], headers={history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel, id=cf30124b-7876-6a31-08be-3a92f6f79fb0, timestamp=1497421404466}]
			 DEBUG [org.springframework.integration.splitter.DefaultMessageSplitter]  - org.springframework.integration.config.SplitterFactoryBean#0 received message: GenericMessage [payload=[message number 1, message number 2, message number 3, message number 4, message number 5], headers={history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel, id=cf30124b-7876-6a31-08be-3a92f6f79fb0, timestamp=1497421404466}]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - preSend on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel', message: GenericMessage [payload=message number 1, headers={sequenceNumber=1, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=2b13c927-257c-2228-e3e0-283e63e1e134, sequenceSize=5, timestamp=1497421404467}]
			 DEBUG [org.springframework.integration.aggregator.AggregatingMessageHandler]  - org.springframework.integration.config.AggregatorFactoryBean#0 received message: GenericMessage [payload=message number 1, headers={sequenceNumber=1, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=2b13c927-257c-2228-e3e0-283e63e1e134, sequenceSize=5, timestamp=1497421404467}]
			 DEBUG [org.springframework.integration.aggregator.AbstractCorrelatingMessageHandler]  - Handling message with correlationKey [f849f4d3-3317-3406-fba0-ca8adc66b865]: GenericMessage [payload=message number 1, headers={sequenceNumber=1, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel,toTestAMongoDbMessageStoreUsageByAnAggregator, id=88271f23-4cb7-7b89-9c9f-5187ac0cec66, sequenceSize=5, timestamp=1497421404467}]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - findAndModify using query: { "_id" : "messagesSequence"} fields: { "sequence" : 1} sort: null for class: interface java.util.Map and update: { "$inc" : { "sequence" : 1}} in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - Inserting DBObject containing fields: [_class, _id, message, messageId, createdTime, groupId, lastModifiedTime, complete, lastReleasedSequence, sequence] in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of group size for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of one message for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - postSend (sent=true) on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel', message: GenericMessage [payload=message number 1, headers={sequenceNumber=1, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=2b13c927-257c-2228-e3e0-283e63e1e134, sequenceSize=5, timestamp=1497421404467}]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - preSend on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel', message: GenericMessage [payload=message number 2, headers={sequenceNumber=2, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=07765001-63a9-b8b6-1fa1-058df1bb5a3c, sequenceSize=5, timestamp=1497421404475}]
			 DEBUG [org.springframework.integration.aggregator.AggregatingMessageHandler]  - org.springframework.integration.config.AggregatorFactoryBean#0 received message: GenericMessage [payload=message number 2, headers={sequenceNumber=2, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=07765001-63a9-b8b6-1fa1-058df1bb5a3c, sequenceSize=5, timestamp=1497421404475}]
			 DEBUG [org.springframework.integration.aggregator.AbstractCorrelatingMessageHandler]  - Handling message with correlationKey [f849f4d3-3317-3406-fba0-ca8adc66b865]: GenericMessage [payload=message number 2, headers={sequenceNumber=2, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel,toTestAMongoDbMessageStoreUsageByAnAggregator, id=b0df7dee-97fb-b012-7ab0-08c01dbdabd1, sequenceSize=5, timestamp=1497421404475}]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of group size for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of messages for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - findAndModify using query: { "_id" : "messagesSequence"} fields: { "sequence" : 1} sort: null for class: interface java.util.Map and update: { "$inc" : { "sequence" : 1}} in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - Inserting DBObject containing fields: [_class, _id, message, messageId, createdTime, groupId, lastModifiedTime, complete, lastReleasedSequence, sequence] in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of group size for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of one message for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - postSend (sent=true) on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel', message: GenericMessage [payload=message number 2, headers={sequenceNumber=2, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=07765001-63a9-b8b6-1fa1-058df1bb5a3c, sequenceSize=5, timestamp=1497421404475}]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - preSend on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel', message: GenericMessage [payload=message number 3, headers={sequenceNumber=3, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=7026dff1-d756-a29f-f127-3a9e8fc5c8e9, sequenceSize=5, timestamp=1497421404486}]
			 DEBUG [org.springframework.integration.aggregator.AggregatingMessageHandler]  - org.springframework.integration.config.AggregatorFactoryBean#0 received message: GenericMessage [payload=message number 3, headers={sequenceNumber=3, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=7026dff1-d756-a29f-f127-3a9e8fc5c8e9, sequenceSize=5, timestamp=1497421404486}]
			 DEBUG [org.springframework.integration.aggregator.AbstractCorrelatingMessageHandler]  - Handling message with correlationKey [f849f4d3-3317-3406-fba0-ca8adc66b865]: GenericMessage [payload=message number 3, headers={sequenceNumber=3, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel,toTestAMongoDbMessageStoreUsageByAnAggregator, id=a0630c0d-3fa1-ecd3-24a9-39b0367e42d5, sequenceSize=5, timestamp=1497421404486}]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of group size for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of messages for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - findAndModify using query: { "_id" : "messagesSequence"} fields: { "sequence" : 1} sort: null for class: interface java.util.Map and update: { "$inc" : { "sequence" : 1}} in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - Inserting DBObject containing fields: [_class, _id, message, messageId, createdTime, groupId, lastModifiedTime, complete, lastReleasedSequence, sequence] in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of group size for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of one message for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - postSend (sent=true) on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel', message: GenericMessage [payload=message number 3, headers={sequenceNumber=3, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=7026dff1-d756-a29f-f127-3a9e8fc5c8e9, sequenceSize=5, timestamp=1497421404486}]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - preSend on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel', message: GenericMessage [payload=message number 4, headers={sequenceNumber=4, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=6d6fd576-568d-95c2-0996-931898ef0d2f, sequenceSize=5, timestamp=1497421404495}]
			 DEBUG [org.springframework.integration.aggregator.AggregatingMessageHandler]  - org.springframework.integration.config.AggregatorFactoryBean#0 received message: GenericMessage [payload=message number 4, headers={sequenceNumber=4, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=6d6fd576-568d-95c2-0996-931898ef0d2f, sequenceSize=5, timestamp=1497421404495}]
			 DEBUG [org.springframework.integration.aggregator.AbstractCorrelatingMessageHandler]  - Handling message with correlationKey [f849f4d3-3317-3406-fba0-ca8adc66b865]: GenericMessage [payload=message number 4, headers={sequenceNumber=4, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel,toTestAMongoDbMessageStoreUsageByAnAggregator, id=f20594a2-6949-28bd-5c64-117024da3e11, sequenceSize=5, timestamp=1497421404495}]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of group size for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of messages for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - findAndModify using query: { "_id" : "messagesSequence"} fields: { "sequence" : 1} sort: null for class: interface java.util.Map and update: { "$inc" : { "sequence" : 1}} in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - Inserting DBObject containing fields: [_class, _id, message, messageId, createdTime, groupId, lastModifiedTime, complete, lastReleasedSequence, sequence] in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of group size for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of one message for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - postSend (sent=true) on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel', message: GenericMessage [payload=message number 4, headers={sequenceNumber=4, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=6d6fd576-568d-95c2-0996-931898ef0d2f, sequenceSize=5, timestamp=1497421404495}]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - preSend on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel', message: GenericMessage [payload=message number 5, headers={sequenceNumber=5, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=49705086-f434-6039-599a-9c20aa3c8f78, sequenceSize=5, timestamp=1497421404501}]
			 DEBUG [org.springframework.integration.aggregator.AggregatingMessageHandler]  - org.springframework.integration.config.AggregatorFactoryBean#0 received message: GenericMessage [payload=message number 5, headers={sequenceNumber=5, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=49705086-f434-6039-599a-9c20aa3c8f78, sequenceSize=5, timestamp=1497421404501}]
			 DEBUG [org.springframework.integration.aggregator.AbstractCorrelatingMessageHandler]  - Handling message with correlationKey [f849f4d3-3317-3406-fba0-ca8adc66b865]: GenericMessage [payload=message number 5, headers={sequenceNumber=5, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel,toTestAMongoDbMessageStoreUsageByAnAggregator, id=7ef12b25-7a28-cc94-21ef-1cfc54404aa2, sequenceSize=5, timestamp=1497421404501}]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of group size for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of messages for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - findAndModify using query: { "_id" : "messagesSequence"} fields: { "sequence" : 1} sort: null for class: interface java.util.Map and update: { "$inc" : { "sequence" : 1}} in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - Inserting DBObject containing fields: [_class, _id, message, messageId, createdTime, groupId, lastModifiedTime, complete, lastReleasedSequence, sequence] in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of group size for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of one message for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.aggregator.AbstractCorrelatingMessageHandler]  - Completing group with correlationKey [f849f4d3-3317-3406-fba0-ca8adc66b865]
			 DEBUG [org.springframework.integration.store.PersistentMessageGroup]  - Lazy loading of messages for messageGroup: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - find using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} fields: null for class: class org.springframework.integration.mongodb.store.MessageDocument in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.integration.aggregator.DefaultAggregatingMessageGroupProcessor]  - Excluding header 'history' upon aggregation due to conflict(s) in MessageGroup with correlation key: f849f4d3-3317-3406-fba0-ca8adc66b865
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - preSend on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorOutboundChannelAdapter', message: GenericMessage [payload=[message number 5, message number 4, message number 3, message number 2, message number 1], headers={sequenceNumber=5, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel,toTestAMongoDbMessageStoreUsageByAnAggregator,toTestAMongoDbMessageStoreUsageByAnAggregatorOutboundChannelAdapter, id=5eb95f89-1756-7a29-b598-bad274d5ac7f, sequenceSize=5, timestamp=1497421404508}]
			 DEBUG [org.springframework.integration.handler.MethodInvokingMessageHandler]  - org.springframework.integration.handler.MethodInvokingMessageHandler#28 received message: GenericMessage [payload=[message number 5, message number 4, message number 3, message number 2, message number 1], headers={sequenceNumber=5, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel,toTestAMongoDbMessageStoreUsageByAnAggregator,toTestAMongoDbMessageStoreUsageByAnAggregatorOutboundChannelAdapter, id=5eb95f89-1756-7a29-b598-bad274d5ac7f, sequenceSize=5, timestamp=1497421404508}]
			 INFO  [spring.integration.test.adapter.receiver.ChannelAdapterReceiver]  - Channel Adapter Receiver: Message Received: GenericMessage [payload=[message number 5, message number 4, message number 3, message number 2, message number 1], headers={sequenceNumber=5, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel,toTestAMongoDbMessageStoreUsageByAnAggregator,toTestAMongoDbMessageStoreUsageByAnAggregatorOutboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorOutboundChannelAdapter.adapter, id=e89ed8b4-22f1-22ac-8a5f-306131586cb5, sequenceSize=5, timestamp=1497421404508}]*********END OF THE MESSAGE *************************
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - postSend (sent=true) on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorOutboundChannelAdapter', message: GenericMessage [payload=[message number 5, message number 4, message number 3, message number 2, message number 1], headers={sequenceNumber=5, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel,toTestAMongoDbMessageStoreUsageByAnAggregator,toTestAMongoDbMessageStoreUsageByAnAggregatorOutboundChannelAdapter, id=5eb95f89-1756-7a29-b598-bad274d5ac7f, sequenceSize=5, timestamp=1497421404508}]
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - Calling update using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} and update: { "$set" : { "lastModifiedTime" : 1497421404508 , "complete" : true}} in collection: configurableStoreMessages
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - Remove using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"} , "messageId" : { "$in" : [ { "$uuid" : "7ef12b25-7a28-cc94-21ef-1cfc54404aa2"} , { "$uuid" : "f20594a2-6949-28bd-5c64-117024da3e11"} , { "$uuid" : "a0630c0d-3fa1-ecd3-24a9-39b0367e42d5"} , { "$uuid" : "b0df7dee-97fb-b012-7ab0-08c01dbdabd1"} , { "$uuid" : "88271f23-4cb7-7b89-9c9f-5187ac0cec66"}]}} in collection: configurableStoreMessages.
			 DEBUG [org.springframework.data.mongodb.core.MongoDbUtils]  - Getting Mongo Database name=[test]
			 DEBUG [org.springframework.data.mongodb.core.MongoTemplate]  - Calling update using query: { "groupId" : { "$uuid" : "f849f4d3-3317-3406-fba0-ca8adc66b865"}} and update: { "$set" : { "lastModifiedTime" : 1497421404508}} in collection: configurableStoreMessages
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - postSend (sent=true) on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel', message: GenericMessage [payload=message number 5, headers={sequenceNumber=5, correlationId=f849f4d3-3317-3406-fba0-ca8adc66b865, history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel, id=49705086-f434-6039-599a-9c20aa3c8f78, sequenceSize=5, timestamp=1497421404501}]
			 DEBUG [org.springframework.integration.channel.DirectChannel]  - postSend (sent=true) on channel 'toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel', message: GenericMessage [payload=[message number 1, message number 2, message number 3, message number 4, message number 5], headers={history=toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter,toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel, id=cf30124b-7876-6a31-08be-3a92f6f79fb0, timestamp=1497421404466}]
			 
		
		-->
<!-- 		<bean id="configurableMongoDbMessageStore" class="org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore" c:mongoTemplate-ref="myMongoTemplate" -->
		<bean id="configurableMongoDbMessageStore" class="org.springframework.integration.mongodb.store.ConfigurableMongoDbMessageStore" c:mongoDbFactory-ref="mongoDbFactory" />
		
<!-- 		<bean id="myMongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate"> -->
<!-- 			<constructor-arg index="0" ref="mongoDbFactory" type="org.springframework.data.mongodb.MongoDbFactory"></constructor-arg> -->
<!-- 			<constructor-arg index="1" ref="myMongoDbConverter" type="org.springframework.data.mongodb.core.convert.MongoConverter"></constructor-arg> -->
<!-- 		</bean> -->
		
<!-- 		<bean id="myMongoDbConverter" class="org.springframework.integration.mongodb.support.MongoDbMessageBytesConverter"></bean> -->
		
		<int:inbound-channel-adapter id="toTestAMongoDbMessageStoreUsageByAnAggregatorInboundChannelAdapter" channel="toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel"
			expression="T(java.util.Arrays).asList('message number 1', 'message number 2', 'message number 3', 'message number 4', 'message number 5')" auto-startup="true">
			<int:poller fixed-rate="1000" />
		</int:inbound-channel-adapter>
		
		<int:splitter id="toTestAMongoDbMessageStoreUsageByAnAggregatorSplitter" input-channel="toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterInputChannel" 
			output-channel="toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel" 
			auto-startup="true" />
		
<!-- 		<int:channel id="toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel"> -->
<!-- 			<int:queue capacity="500" /> -->
<!-- 			<int:interceptors> -->
<!-- 				<ref bean="myChannelInterceptor" /> -->
<!-- 			</int:interceptors> -->
<!-- 		</int:channel> -->
		
		<int:aggregator id="toTestAMongoDbMessageStoreUsageByAnAggregator" input-channel="toTestAMongoDbMessageStoreUsageByAnAggregatorSplitterOutputChannel" 
			output-channel="toTestAMongoDbMessageStoreUsageByAnAggregatorOutboundChannelAdapter" message-store="configurableMongoDbMessageStore" auto-startup="true">
		</int:aggregator>
		
		<int:outbound-channel-adapter id="toTestAMongoDbMessageStoreUsageByAnAggregatorOutboundChannelAdapter"
			ref="channelAdapterReceiver" method="receiveMessage" auto-startup="true" />			
		
</beans>