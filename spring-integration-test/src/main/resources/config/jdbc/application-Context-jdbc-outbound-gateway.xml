<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:int="http://www.springframework.org/schema/integration" xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc" xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:int-jmx="http://www.springframework.org/schema/integration/jmx" xmlns:int-file="http://www.springframework.org/schema/integration/file" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:int-script="http://www.springframework.org/schema/integration/scripting" xmlns:int-groovy="http://www.springframework.org/schema/integration/groovy" xmlns:int-http="http://www.springframework.org/schema/integration/http"
	xmlns:int-ftp="http://www.springframework.org/schema/integration/ftp" xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-event="http://www.springframework.org/schema/integration/event" xmlns:int-feed="http://www.springframework.org/schema/integration/feed" xmlns:gfe="http://www.springframework.org/schema/gemfire"
	xmlns:int-gfe="http://www.springframework.org/schema/integration/gemfire" xmlns:gfe-data="http://www.springframework.org/schema/data/gemfire" xmlns:int-ip="http://www.springframework.org/schema/integration/ip"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/integration/groovy http://www.springframework.org/schema/integration/groovy/spring-integration-groovy-2.2.xsd
		http://www.springframework.org/schema/integration/jdbc http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc-2.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration/scripting http://www.springframework.org/schema/integration/scripting/spring-integration-scripting-2.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/integration/http http://www.springframework.org/schema/integration/http/spring-integration-http-2.2.xsd
		http://www.springframework.org/schema/integration/ftp http://www.springframework.org/schema/integration/ftp/spring-integration-ftp-2.2.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.2.xsd
		http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file-2.2.xsd
		http://www.springframework.org/schema/integration/jmx http://www.springframework.org/schema/integration/jmx/spring-integration-jmx-2.2.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream-2.2.xsd
		http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.2.xsd
		http://www.springframework.org/schema/integration/event http://www.springframework.org/schema/integration/event/spring-integration-event-2.2.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/integration/feed http://www.springframework.org/schema/integration/feed/spring-integration-feed-2.2.xsd
		http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire.xsd
		http://www.springframework.org/schema/integration/gemfire http://www.springframework.org/schema/integration/gemfire/spring-integration-gemfire-2.2.xsd
		http://www.springframework.org/schema/data/gemfire http://www.springframework.org/schema/data/gemfire/spring-data-gemfire.xsd
		http://www.springframework.org/schema/integration/ip http://www.springframework.org/schema/integration/ip/spring-integration-ip-2.2.xsd">

	<!-- In this case I am testing a simple jdbc-outbound-gateway. I am specifying a select query to execute and generate a reply message from the result (like the inbound adapter). In 
		this case this gateway is making an insert and immediately is making a select of the same record that was inserted by its id to generate a reply message. I am specifying a ExpressionEvaluatingSqlParameterSourceFactory 
		for request (for the update query) and using the default bean property expressions by default for reply (for the select query). I am wrapping the pool operation of the inbound-channel-adapter 
		in a transaction. When an error happens when the reply is processed in this case by the service-activator, all the pool operation is rollbacked and hence the message is not saved in 
		the database (I could send that error message to a specified channel but in this case I am not doing it). Regarding threads, all the process is happening in just a thread: 
		
		<int:inbound-channel-adapter -> jdbcOutboundGatewayRequestChannel -> <int-jdbc:outbound-gateway (it does update and select) -> jdbcOutboundGatewayReplyChannel -> jdbcOutboundGatewayServiceActivator -->

	<int:inbound-channel-adapter id="jdbcOutboundGatewayInboundChannelAdapter"
		expression="T(java.lang.Math).random() > 0.5 ? T(org.springframework.integration.support.MessageBuilder).withPayload('Dantito Ricalde Rivera').setHeader('myId', T(java.util.UUID).randomUUID().toString()).setHeader('anotherPaymentType', 'DEBIT').setHeader('status', 1).build(): 
    		T(org.springframework.integration.support.MessageBuilder).withPayload('Danielito Ricalde Rivera').setHeader('myId', T(java.util.UUID).randomUUID().toString()).setHeader('anotherPaymentType', 'PERSONAL CHECK').setHeader('status', 2).build()"
		channel="jdbcOutboundGatewayRequestChannel" auto-startup="true">
		<int:poller fixed-rate="10000">
			<int:transactional transaction-manager="jdbcTransactionManager" />
		</int:poller>
	</int:inbound-channel-adapter>

	<int:channel id="jdbcOutboundGatewayRequestChannel" />

	<int-jdbc:outbound-gateway id="jdbcOutboundGatewaySimple"
		update="insert into item(id, status, code, description, created_date, message_bytes) values (:id, :status, :code, :description, :created_date, :message_bytes)" query="select * from item where id=:headers[myId]"
		request-channel="jdbcOutboundGatewayRequestChannel" reply-channel="jdbcOutboundGatewayReplyChannel" data-source="jdbcDataSource" request-sql-parameter-source-factory="outboundGatewaySpelSource"
		auto-startup="true"></int-jdbc:outbound-gateway>

	<int:channel id="jdbcOutboundGatewayReplyChannel" />

	<int:service-activator id="jdbcOutboundGatewayServiceActivator" input-channel="jdbcOutboundGatewayReplyChannel" ref="jdbcOutboundGatewayServiceActivatorWithoutAnOutputChannel"
		auto-startup="true" />

	<bean id="jdbcOutboundGatewayServiceActivatorWithoutAnOutputChannel" class="spring.integration.test.handler.serviceActivator.ServiceActivatorWithoutAnOutputChannel"
		p:sometimesThrowsException="true" />

	<bean id="outboundGatewaySpelSource" class="org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory">
		<property name="parameterExpressions">
			<map>
				<entry key="id" value="headers['myId']" />
				<entry key="code" value="payload" />
				<entry key="status" value="headers['status']" />
				<entry key="description" value="payload" />
				<entry key="created_date" value="new java.util.Date()" />
				<entry key="message_bytes" value="#this" />
			</map>
		</property>
	</bean>

	<!-- *************************** HIBERNATE AND TRANSACTION MANAGEMENT ********************************* -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" id="jdbcDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/jdbcinboundchanneladapter" />
		<property name="username" value="root" />
		<property name="password" value="sa" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="1800000" />
		<property name="numTestsPerEvictionRun" value="3" />
		<property name="minEvictableIdleTimeMillis" value="1800000" />
		<property name="validationQuery" value="SELECT 1" />
	</bean>

	<bean id="jdbcSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">none</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="current_session_context_class">jta</prop>
				<prop key="connection.isolation">2</prop>
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.jdbc.batch_size">10</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.generate_statistics">false</prop>
			</props>
		</property>
		<property name="packagesToScan" value="spring.integration.test" />
	</bean>

	<bean id="jdbcTransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="jdbcSessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="jdbcTransactionManager" order="100" />

</beans>